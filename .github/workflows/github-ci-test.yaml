name: Unit tests, build and push image
on:
#  push:
#    branches:
#     - main
  pull_request:
    branches:
      - test
    types:
      - closed

jobs:
  build-image:
    name: Run prepare and build image
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    #if: |
    #  startsWith(github.ref, 'refs/tags') ||
    #  github.ref == 'refs/heads/develop' || 
    #  (github.event_name == 'pull_request' && 
    #  github.event.pull_request.merged == true)
    steps:
      - name: Checkout codes
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.14.2'
      - name: Use branch name
        uses: nelonoel/branch-name@v1.0.1
        # Prepare
      - uses: haya14busa/action-cond@v1
        id: base_branch_tagging
        with:
          cond: ${{ startsWith(github.ref, 'refs/tags') }}
          if_true: $(echo ${{ github.event.base_ref }} | cut -d '/' -f 3)
          if_false: $BRANCH_NAME
      - uses: haya14busa/action-cond@v1
        id: tag_branch
        with:
          cond: ${{ startsWith(github.ref, 'refs/tags') }}
          if_true: $BRANCH_NAME
          if_false: $(echo ${GITHUB_SHA} | cut -c1-5)
      - name: Export BASE_BRANCH_NAME env
        run: |
          echo "BASE_BRANCH_NAME=${{ steps.base_branch_tagging.outputs.value }}" >> $GITHUB_ENV     
      - name: Export TAG_BRANCH env
        run: |
          echo "TAG=${{ steps.tag_branch.outputs.value }}" >> $GITHUB_ENV  
        # Env vars repo and tag
      - name: Export REPO env
        run: |
          echo "REPO=touch-tha-frontend-test" >> $GITHUB_ENV
        # Prepare
      - name: Install packages
        run: yarn install
      #No tests so github ci returns error code
      #- name: Run tests
      #  run: yarn test
      - name: Run build
        run: yarn build
        env:
          CI: false
      # will run npm install -g serve && serve -s build in docker compose
      #- name: npm install dependencies
      #  run: npm install
      #- name: npm run build (nodeJS)
      #  run: npm run build
      #- name: Save github sha commit
      #  run: echo ${GITHUB_SHA} > ./build/frontend.hash
      - name: Prepare building (folder)
        run: |
          cp -r . ../build-folder
          mv ../build-folder ${PWD}
        # Build and push
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ECR_REPO_IMAGE=$REPO:$TAG
          docker build --build-arg SRC=./build-folder -t $ECR_REGISTRY/$ECR_REPO_IMAGE .
          docker push $ECR_REGISTRY/$ECR_REPO_IMAGE
      - name: Retag to the latest and push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag $ECR_REGISTRY/$REPO:$TAG $ECR_REGISTRY/$REPO:latest
          docker push $ECR_REGISTRY/$REPO:latest
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
  jenkins:
    name: Webhook push
    runs-on: ubuntu-latest
    needs: build-image
    #if: |
    #  github.ref == 'refs/heads/main' || 
    #  (github.event_name == 'pull_request' && 
    #  github.event.pull_request.merged == true)
    # jenkins webhook test
    steps:
      - name: trigger Jenkins deployment Job
        uses: appleboy/jenkins-action@master
        with:
          url: "https://jenkins.touch.clinic"
          user: "autochief"
          token: ${{ secrets.JENKINS_TOKEN }}
          job: "aws-tha-deploy-app-test"
